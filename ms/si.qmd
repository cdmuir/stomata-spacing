---
title: "2-D Photosynthesis Model"
format: docx
editor: visual
bibliography: ../ms/stomata-spacing.bib
---

We model leaf photosynthesis using a two-dimensional porous medium approximation. The model is solved using a finite element method (FEM) in the *R* package **deSolve** [@soetaert_solving_2010]. Table 1 is a glossary model terms and symbols. Here we describe the model and associated *R* code.

## Leaf anatomy

We assume that the leaf is a homogenous 2-D medium. In the final version, we will incorporate differences in spongy and palisade porosity, gradients in light absorption, electron transport capacity, and Rubisco concentration. The mesophyll is $T_\text{leaf}$ thick and the stomata are regularly spaced apart by distance $U$ on both ab- and adaxial surfaces. In this scenario, we assume that the stomata on each surface are precisely offset from each other by distance $U/2$. This minimizes the average distance between any point in the mesophyll and its nearest stomate. Because of the regular spacing, we only need to model the region between a stomate on surface and the next stomate on the other surface (fig. 1). The rest of the mesophyll will be the same because of symmetry.

```{r, packages1, echo = FALSE, message=FALSE}

library(dplyr)
library(ggforce)
library(ggplot2)
library(magrittr)
library(readr)
library(rootSolve)
library(tidyr)

```

```{r, functions, echo=FALSE, message=FALSE}

source("../r/functions.R")

```

```{r, fig1, message = FALSE, fig.cap='Figure 1: Example leaf anatomy analyzed by the 2-D FEM.', echo = FALSE, fig.height=6, fig.width=3}

# Example leaf where leaf thickness equals interstomatal distance
 xz_ratio = 0.5

  df_stomata = crossing(
    nesting(x = c(0, 1), y = c(0, 1) / xz_ratio),
    r = 0.04,
    x_offset = c(-1.5, 1.5)
  ) |>
    mutate(x0 = x + x_offset * r)

  df_epidermis = df_stomata |>
    summarise(stomata_min = min(x0 - r), stomata_max = max(x0 + r), .by = "y") |>
    mutate(
      xmin = ifelse(stomata_min < 0, stomata_max, 0),
      xmax = ifelse(stomata_max > 1, stomata_min, 1)
    )

  ggplot() +
    geom_circle(data = df_stomata, mapping = aes(x0 = x0, y0 = y, r = r)) +
    geom_segment(data = df_epidermis,
                 mapping = aes(
                   x = xmin,
                   xend = xmax,
                   y = y,
                   yend = y
                 ), linewidth = 1.5) +
    geom_text(
      data = df_stomata |>
        select(x, y) |>
        distinct(),
      mapping = aes(x, y, label = "stomate"),
      position = position_nudge(y = c(-0.05, 0.05) / xz_ratio)
    ) +
    geom_text(
      mapping = aes(x = 0.5, y = c(-0.1, 0.5, 1.1) / xz_ratio, label = c("abaxial", "mesophyll", "adaxial"))
    ) +
    geom_segment(mapping = aes(x = 0, y = -0.15 / xz_ratio, xend = 1, yend = -0.15 / xz_ratio),
                 arrow = arrow(angle = 90, length = unit(0.0125 / xz_ratio, "npc"), ends = "both") ) +
    geom_segment(mapping = aes(x = -0.15, y = 0 / xz_ratio, xend = -0.15, yend = 1 / xz_ratio),
                 arrow = arrow(angle = 90, length = unit(0.0125 / xz_ratio, "npc"), ends = "both") ) +
    geom_text(mapping = aes(x = 0.5, y = -0.2 / xz_ratio, label = "paste(italic(U) / 2, ', half the interstomatal distance [', mu, 'm]')"),
              parse = TRUE) +
    geom_text(mapping = aes(x = -0.2, y = 0.5 / xz_ratio, label = "paste(italic(T)[leaf], ', leaf thickness [', mu, 'm]')"),
              parse = TRUE, angle = 90) +
    coord_equal(clip = "off") +
    theme_void()
    
```

```{r, glossary, echo = FALSE, message = FALSE}

readr::read_csv("../raw-data/2d-pm-parameters.csv") |>
  # filter(!calculated) |>
  mutate(Value = glue::glue("${x}$", x = scientize(default_value))) |>
  select(Name = name, Symbol = symbol, Value, Units = units, Notes = notes) |>
  knitr::kable(caption = "Table 1: glossary of model terms and mathematical symbols.")
```

## Solution

Below I have copied the section from @earles_excess_2017 (pg. 1094) on which I based my model. After that, I'll explain my modification for 2-D. I also think @earles_excess_2017 made one error that I will describe below.

"We developed a FEM to solve a set of partial differential equations that describe CO$_2$ diffusion, photosynthesis, and respiration throughout the 1-D leaf geometry. The partial differential equations were solved for steady state using the R library **deSolve** [@soetaert_solving_2010]. Specifically, the diffusive flux of CO$_2$ through the stomatal boundaries, intercellular airspace, and mesophyll cells was described by:

$$D_\text{e} \frac{\partial^2 C_\text{ias}}{\partial x^2} = -f_\text{liq}$$ {#eq-1d_pm_flux}

$$f_\text{liq} = r_\text{d} + r_\text{d} - r_\text{c}$$ {#eq-1d_pm_fliq}

where

$$
D_\text{e} = \frac{\phi}{\tau} D_\text{c}
$$ {#eq-De}

is the effective diffusivity of a porous medium composed of a porous intercellular airspace with a given porosity ($\phi$; m$^3$ m$^{-3}$) and tortuosity ($\tau$; m m$^{-1}$), $D_\text{c}$\] is the diffusion coefficient (m s$^{-1}$) for CO$_2$ in the intercellular airspace, $C_\text{ias}$ is the \[CO$_2$\] (mol m$^{-3}$) at a depth $z$ in the intercellular airspace, $f_\text{liq}$ is the volumetric rate of CO$_2$ diffusion from the intercellular airspace into the chloroplast stroma (mol m$^{-3}$ s$^{-1}$), $r_\text{c}$ is the volumetric rate of ribulose 1,5-bisphosphate (RuBP) carboxylation (mol m$^{-3}$ s$^{-1}$), $r_\text{d}$ is the volumetric respiration rate (mol m$^{-3}$ s$^{-1}$), and $r_\text{p}$ is the volumetric photorespiration rate by Rubisco (mol m$^{-3}$ s$^{-1}$).

The volumetric rate of CO$_2$ diffusion from the intercellular airspace into the chloroplast stroma, $f_\text{liq}$, is defined as:

$$f_\text{liq} = \frac{g_\text{liq} (C_\text{liq} - C_\text{ias})}{l_z}$$ {#eq-fliq1}

where $g_\text{liq}$ is the CO$_2$ conductance from the intercellular airspace into the chloroplast stroma (m s$^{-1}$), $C_\text{liq}$ (mol m$^{-3}$) is the \[CO$_2$\] in the stroma, and $l_z$ is the finite element length through which diffusion occurs (m)." (n.b. $l_z$ is the same as $t_\text{elem}$ in my Table 1)

In the 2-D model, we extend the flux equation to $x$ (length) and $z$ (depth) dimensions:

$$D_\text{e} \nabla^2 C_\text{ias} = D_\text{e} \bigg(\frac{\partial^2 C_\text{ias}}{\partial x^2} + \frac{\partial^2 C_\text{ias}}{\partial z^2}\bigg) = -f_\text{liq}$$ {#eq-2d_pm_flux}

As I worked through @earles_excess_2017 model, it did not seem like dividing $g_\text{liq}$ by $l_z$ in equation @eq-fliq1 made sense. The FEM is a discretization of a continuous model. Intuitively, it does make sense why a coarser grid (greater $l_z$) would lead to a larger \[CO$_2$\] drawdown for a given assimilation rate. Noting that $g_\text{liq}$ is conductance per m$^2$ of stroma, I think the correct way is to divide by $V_\text{strom}$, which gives the mesophyll surface area per stroma volume available for liquid-phase diffusion. Here I assume that the chloroplasts line the entire inner wall of the mesophyll, so 1 [m$^2$] mesophyll = 1 [m$^2$] stroma, but this could be modified to the correct value. My equation is therefore:

$$f_\text{liq} = \frac{g_\text{liq} (C_\text{liq} - C_\text{ias})}{V_\text{strom}}$$ {#eq-fliq2}

Here's how I work out the units for equation @eq-fliq2.

$$\frac{\text{mol}}{\text{m}^3~\text{s}} = \bigg(\frac{\text{m}^3}{\text{m}^2~\text{stroma}} \times \frac{1~\text{m}^2~\text{stroma}}{1~\text{m}^2~\text{meso}} \bigg) \times \bigg(\frac{\text{mol}}{\text{m}^3} \bigg) \times \bigg( \frac{\text{m}^2~\text{meso}}{\text{m}^3} \bigg)$$

This still doesn't seem quite right to me because it seems like the change in airspace concentration should be affected by the porosity since a smaller volume of air will experience a greater drop in concentration for the same amount of assimilation, but maybe I am thinking about this incorrectly.

Coincidentally, this had little effect on @earles_excess_2017 model because their element size was $\approx 1~\mu$m, which is quantitatively similar to $V_\text{strom} = 1.74 \times 10^{-6}$m. However, when you change the element size on their model, the solution is quite different; when you change the element size on my model, the solution is only slightly affected but the discretization is an approximation of the true solution. 

I calculated assimilation and respiration the same way as @earles_excess_2017 using the standard C\$\_3\$ biochemical model.

The boundary conditions are that the CO$_2$ concentration in the substomatal cavity is constant at $C_\text{stom}$. The fluxes on the left and right sides are 0 because of symmetry.

## R code

I've copied the *R* code to set up the model and solve it if you want to copy and paste on your own machine. I annotated the *R* code you would need to run the model and include an example result.


```{r, model}

library(dplyr)
library(ggforce)
library(ggplot2)
library(magrittr)
library(readr)
library(rootSolve)
library(tidyr)

source("../r/photo_2d_pm.R")

# Define function for 2D FEM
photo_2d_pm = function(t, Y, parms) {

  # Arguments:
  # * t, time step used by steady.2d() to find steady-state solution
  # * Y, vector of length 2 * n_x * n_z. The first half are the elements
  # corresponding to C_ias[i,j]; the second half are correspoding elements for
  # C_liq[i,j].
  # * parms, list of model parameters. Use `get_2d_pm_default_parms()` for
  #  default parameter values.

  # Set up:
  # The leaf is divided to an area n_x elements wide, n_z units deep
  n = parms[["n_z"]] * parms[["n_x"]]

  # Create empty matrices for computation
  C_ias = matrix(nrow = parms[["n_z"]], ncol = parms[["n_x"]],
                 data = Y[1:n])
  C_liq = matrix(nrow = parms[["n_z"]], ncol = parms[["n_x"]],
                 data = Y[(n + 1):(2 * n)])
  dC_ias = dC_liq = numeric(length = n) # empty vectors

  # CARBOXYLATION AND RESPIRATION ----
  # Calculate volumetric j_max from area-based J_max. Here, I assume a single
  # j_max for every part of the leaf, but in the final model I will have a
  # gradient of j_max following Earles et al. (2017).
  j_max = parms[["J_max"]] / (parms[["S_m"]] * parms[["V_strom"]])

  # Carboxylation (n.b. Rubisco concentration is assumed constant throughout
  # the leaf, but in the final model I will have a garudent of X_c following
  # Earles et al. (2017))
  w_c = (parms[["k_c"]] * parms[["X_c"]] * C_liq) / (parms[["K_m"]] + C_liq)
  w_j = C_liq * j_max / (4 * C_liq + 8 * parms[["gamma_star"]])
  r_c = pmin(w_c, w_j)
  r_d = parms[["r_d"]]
  r_p = r_c * parms[["gamma_star"]] / C_liq

  # FLUX ----
  D_e = parms[["D_c"]] * parms[["phi"]] / parms[["tau"]]

  # Boundary conditions
  bound_bottom = C_ias[1,]
  bound_top = C_ias[parms[["n_z"]],]
  bound_left = C_ias[,1]
  bound_right = C_ias[, parms[["n_x"]]]
  bound_top[1] = parms[["C_stom"]]
  bound_bottom[parms[["n_x"]]] = parms[["C_stom"]]
  # bound_bottom[1] = parms[["C_stom"]]

  # diffusion in Z-direction
  Flux = -D_e / parms[["t_elem"]] * rbind(
    C_ias[1, ] - bound_bottom,
    (C_ias[2:parms[["n_z"]], ] - C_ias[1:(parms[["n_z"]] - 1), ]),
    bound_top - C_ias[parms[["n_z"]], ]
  )
  dC_ias = dC_ias -
    (Flux[2:(parms[["n_z"]] + 1), ] - Flux[1:parms[["n_z"]], ]) / parms[["t_elem"]]

  # diffusion in X-direction
  Flux = -D_e / parms[["t_elem"]] * cbind(
    C_ias[, 1] - bound_left,
    (C_ias[, 2:parms[["n_x"]]] - C_ias[, 1:(parms[["n_x"]] - 1)]),
    bound_right - C_ias[, parms[["n_x"]]]
  )
  dC_ias = dC_ias -
    (Flux[, 2:(parms[["n_x"]] + 1)] - Flux[, 1:parms[["n_x"]]]) /
    parms[["t_elem"]]

  dC_ias = dC_ias + parms[["g_liq"]] * (C_liq - C_ias) / parms[["V_strom"]]

  # CARBOXYLATION ----
  # Leaf thickness - needed to scale from stroma volume per leaf volume
  T_leaf = parms[["n_z"]] * parms[["t_elem"]] # [m]
  dC_liq = dC_liq + parms[["g_liq"]] * (C_ias - C_liq) / parms[["V_strom"]] +
    (-r_c + r_p + r_d) * (parms[["S_m"]] * 1 / T_leaf) * parms[["V_strom"]]

  return(list(c(dC_ias, dC_liq)))

}

# Model parameters
parms = get_2d_pm_default_parms() |>
  derive_2d_pm_parms()

# Initial values
C_ias_mat = matrix(nrow = parms[["n_z"]], ncol = parms[["n_x"]], parms[["C_stom"]])
C_liq_mat = matrix(nrow = parms[["n_z"]], ncol = parms[["n_x"]], parms[["C_stom"]])

# Solve for C_ias and C_liq
soln = steady.2D(c(C_ias_mat, C_liq_mat), func = photo_2d_pm, parms = parms,
                 pos = FALSE, dimens = c(parms[["n_z"]], parms[["n_x"]]),
                 nspec = 2, lrw = 1e8, atol = 1e-10, rtol = 1e-10, ctol = 1e-10)

# Plot results
df_C = expand.grid(
  z = seq_len(parms[["n_z"]]),
  x = seq_len(parms[["n_x"]]),
  name = c("C_ias", "C_liq")
) |>
  mutate(value = soln$y)

ggplot(df_C, aes(x, z, z = value)) +
  facet_grid(~ name) +
  geom_contour_filled() +
  coord_equal()

# Calculate area-based net photosynthesis
C_liq = df_C |>
  filter(name == "C_liq") |>
  pull(value)

j_max = parms[["J_max"]] / (parms[["S_m"]] * parms[["V_strom"]])

w_c = (parms[["k_c"]] * parms[["X_c"]] * C_liq) / (parms[["K_m"]] + C_liq)
w_j = C_liq * j_max / (4 * C_liq + 8 * parms[["gamma_star"]])
r_c = pmin(w_c, w_j)
r_d = parms[["r_d"]]
r_p = r_c * parms[["gamma_star"]] / C_liq

T_leaf = parms[["n_z"]] * parms[["t_elem"]]
a_n = (r_c - r_p - r_d) * (parms[["S_m"]] * 1 / T_leaf) * parms[["V_strom"]]

# 1 m^2 of 200 um thick leaf is 2e-04 m^3
mean(a_n) * T_leaf * 1e6

```

## References
